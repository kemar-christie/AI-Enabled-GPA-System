DROP TABLE IF EXISTS admin, alert, enroll, student, module;

CREATE TABLE student (
    stdID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(100) NOT NULL,
    password VARCHAR(100) NOT NULL CHECK (CHAR_LENGTH(password) >= 8 AND 
                                        password REGEXP '[A-Z]' AND 
                                        password REGEXP '[a-z]' AND 
                                        password REGEXP '[0-9]'),
    email_address VARCHAR(255) NOT NULL,
    school VARCHAR(100),
    programme VARCHAR(255)
) AUTO_INCREMENT=2400000;

CREATE TABLE module (
    moduleID VARCHAR(20) PRIMARY KEY,
    moduleName VARCHAR(255),
    num_of_credits INT CHECK (num_of_credits <= 4)
);

CREATE TABLE enroll (
    stdID INT NOT NULL,
    moduleID VARCHAR(20) NOT NULL,
    semester INT CHECK (semester IN (1, 2)),
    year VARCHAR(10),
    grade VARCHAR(5),
    PRIMARY KEY (stdID, moduleID, semester, year),
    FOREIGN KEY (stdID) REFERENCES student(stdID),
    FOREIGN KEY (moduleID) REFERENCES module(moduleID)
);

CREATE TABLE alert (
    stdID INT PRIMARY KEY,
    faculty_admin_email VARCHAR(255) NOT NULL,
    faculty_admin_name VARCHAR(100) NOT NULL,
    advisor_name VARCHAR(100) NOT NULL,
    advisor_email VARCHAR(255) NOT NULL,
    prog_dir_name VARCHAR(100) NOT NULL,
    prog_dir_email VARCHAR(255) NOT NULL,
    FOREIGN KEY (stdID) REFERENCES student(stdID)
);

CREATE TABLE admin ( 
    adminID VARCHAR(20) PRIMARY KEY, 
    admin_fullname VARCHAR(50) NOT NULL, 
    password VARCHAR(100) NOT NULL CHECK (
        CHAR_LENGTH(password) >= 8 AND 
        password REGEXP '[A-Z]' AND 
        password REGEXP '[a-z]' AND 
        password REGEXP '[0-9]'
    )
);



DELIMITER $$

CREATE PROCEDURE check_and_add_modules (
    IN student_id INT,
    IN semester INT,
    IN academic_year VARCHAR(10),
    IN module_ids VARCHAR(255) -- Comma-separated string
)
BEGIN
    DECLARE total_credits INT DEFAULT 0;
    DECLARE module_exists BOOLEAN DEFAULT FALSE;

    -- Check if modules are already confirmed for the specified semester and year
    SELECT COUNT(*) > 0 INTO module_exists
    FROM enroll
    WHERE stdID = student_id AND semester = semester AND year = academic_year;

    IF module_exists THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Modules already confirmed for the specified semester and year.';
    END IF;

    -- Calculate the total credits of the provided module IDs
    SELECT SUM(num_of_credits) INTO total_credits
    FROM module
    WHERE FIND_IN_SET(moduleID, module_ids);

    -- Check if total credits are between 9 and 21
    IF total_credits < 9 OR total_credits > 21 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Total module credits must be between 9 and 21.';
    END IF;

    -- Insert modules into the enroll table
    INSERT INTO enroll (stdID, moduleID, semester, year)
    SELECT student_id, moduleID, semester, academic_year
    FROM module
    WHERE FIND_IN_SET(moduleID, module_ids);
END$$

DELIMITER ;



DELIMITER //

CREATE PROCEDURE GetStudentGradesAndCredits(
    IN studentID VARCHAR(20),
    IN academicYear VARCHAR(10)
)
BEGIN
    -- Check if the student exists
    IF NOT EXISTS (SELECT 1 FROM student WHERE stdID = studentID) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Student does not exist.';
    END IF;

    -- Check if the student has enrolled in any modules in the specified academic year
    IF NOT EXISTS (
        SELECT 1 
        FROM enroll 
        WHERE stdID = studentID AND year = academicYear
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No modules found for the student in the specified academic year.';
    END IF;

    -- Check if the student has all grades entered for Semester 1
    IF EXISTS (
        SELECT 1
        FROM enroll e
        WHERE e.stdID = studentID
        AND e.year = academicYear
        AND e.semester = 1
        AND e.grade IS NULL
    ) THEN
        -- If grades are missing for Semester 1, mark it as incomplete
        SET @semester1_complete = FALSE;
    ELSE
        -- All grades are entered for Semester 1
        SET @semester1_complete = TRUE;
    END IF;

    -- Check if the student has all grades entered for Semester 2
    IF EXISTS (
        SELECT 1
        FROM enroll e
        WHERE e.stdID = studentID
        AND e.year = academicYear
        AND e.semester = 2
        AND e.grade IS NULL
    ) THEN
        -- If grades are missing for Semester 2, mark it as incomplete
        SET @semester2_complete = FALSE;
    ELSE
        -- All grades are entered for Semester 2
        SET @semester2_complete = TRUE;
    END IF;

    -- If both semesters have grades entered, select data for both semesters
    IF @semester1_complete AND @semester2_complete THEN
        SELECT 
            e.semester,
            e.grade,
            m.num_of_credits
        FROM 
            enroll e
        JOIN 
            module m ON e.moduleID = m.moduleID
        WHERE 
            e.stdID = studentID
            AND e.year = academicYear
            AND (e.semester = 1 OR e.semester = 2)
        ORDER BY 
            e.semester, e.moduleID;

    -- If only Semester 1 has all grades entered, select data for Semester 1 only
    ELSEIF @semester1_complete AND NOT @semester2_complete THEN
        SELECT 
            e.semester,
            e.grade,
            m.num_of_credits
        FROM 
            enroll e
        JOIN 
            module m ON e.moduleID = m.moduleID
        WHERE 
            e.stdID = studentID
            AND e.year = academicYear
            AND e.semester = 1
        ORDER BY 
            e.moduleID;

    -- If only Semester 2 has all grades entered, select data for Semester 2 only
    ELSEIF @semester2_complete AND NOT @semester1_complete THEN
        SELECT 
            e.semester,
            e.grade,
            m.num_of_credits
        FROM 
            enroll e
        JOIN 
            module m ON e.moduleID = m.moduleID
        WHERE 
            e.stdID = studentID
            AND e.year = academicYear
            AND e.semester = 2
        ORDER BY 
            e.moduleID;

    -- If both semesters have missing grades, raise an error
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Grades are missing for both Semester 1 and Semester 2.';
    END IF;

END //

DELIMITER ;




INSERT INTO `student` (`stdID`, `full_name`, `password`, `email_address`, `school`, `programme`) VALUES
(2400000, 'Alice Johnson', 'Stud3nt0', 'alice.johnson@example.com', 'SCIT', 'Computing'),
(2400001, 'Bob Smith', 'Stud3nt1', 'bob.smith@example.com', 'Utech', 'Business Administration'),
(2400002, 'Charlie Brown', 'Stud3nt2', 'charlie.brown@example.com', 'SOHT', 'Engineering'),
(2400003, 'Diana Prince', 'Stud3nt3', 'diana.prince@example.com', 'SBLM', 'Arts'),
(2400004, 'Ethan Hunt', 'Stud3nt4', 'ethan.hunt@example.com', 'SCIT', 'Information Technology');


INSERT INTO `admin` (`adminID`, `admin_fullname`, `password`) VALUES
('adm1', 'John Doe', 'P@ssw0rd1'),
('adm2', 'Jane Smith', 'P@ssw0rd2'),
('adm3', 'Emily Johnson', 'P@ssw0rd3'),
('adm4', 'Michael Williams', 'P@ssw0rd4'),
('adm5', 'Sarah Brown', 'P@ssw0rd5');